---
title: "Distribución Geométrica"
lang: es
---

```{=html}
<style>
main.content {
text-align: justify}
</style>
```

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(kableExtra)
library(gridExtra)
```

La **distribución geométrica** modela el número de ensayos independientes de Bernoulli necesarios antes de obtener el primer éxito. Es fundamental para analizar tiempos de espera y procesos que involucran la búsqueda del primer evento exitoso.

::: {#def-geometrica}
Una variable aleatoria $X$ sigue una distribución geométrica si representa el número de ensayos necesarios antes de obtener el primer éxito en una secuencia de ensayos independientes de Bernoulli. Si la probabilidad de éxito en cada ensayo es $p$, entonces la función de masa de probabilidad (pmf) está dada por:

$$f(x)= p(1-p)^x \quad \text{para } x =0,  1, 2, 3, \ldots$$

Una variable aleatoria $X$ que tiene distribución geométrica será denotada como $X \sim \text{geo}(p)$.
:::

## Características de la Distribución Geométrica

**Parámetros**

-   $p$: probabilidad de éxito en cada ensayo, donde $0 < p \leq 1$

**Función de Distribución**

\begin{equation}
F(x) = \sum_{u\leq x} f(u) = \begin{cases}
0 & \text{si } x < 0 \\
1-(1-p)^{k+1} & \text{si } k \leq x \leq k+1; \quad k=0,1, \dots 
\end{cases}
\end{equation}

**Parámetros Estadísticos**

Esperanza (Media): $$E(X) = \frac{1-p}{p}$$

Varianza: $$\text{Var}(X) = \frac{1-p}{p^2}$$

Desviación Estándar: $$\sigma = \sqrt{\frac{1-p}{p^2}} = \frac{\sqrt{1-p}}{p}$$

## Ejemplo Básico

::: {#exm-geom_1}
Lanzamiento de monedas - Búsqueda de la primera cara. Consideramos una moneda justa ($p=0.5$), y queremos modelar el número de lanzamientos hasta antes de obtener la primera cara.

```{r}
#| label: moneda-geometrica
# Parámetro
p_cara <- 0.5

# Calcular probabilidades para los primeros 11 ensayos
k_moneda <- 0:10
# Prefijo d (density) sufijo es el de la va
prob_geometrica <- dgeom(k_moneda , p_cara)  

# Crear tabla
geometrica_moneda <- data.frame(
  Ensayo = k_moneda,
  Probabilidad = prob_geometrica,
  Prob_Acumulada = pgeom(k_moneda, p_cara)
)

kable(geometrica_moneda, 
      caption = "Distribución Geométrica - Primera cara (p = 0.5)",
      digits = 4,
      col.names = c("Ensayo", "P(X = x)", "P(X ≤ x)")) %>%
  kable_styling(bootstrap_options = "striped")

# Parámetros estadísticos
media_moneda <- (1-p_cara) / p_cara
varianza_moneda <- (1 - p_cara) / (p_cara^2)
desv_std_moneda <- sqrt(varianza_moneda)


cat("Media (ensayos esperados):", media_moneda, "\n")
cat("Varianza:", varianza_moneda, "\n")
cat("Desviación estándar:", round(desv_std_moneda, 4), "\n")

```

**Visualización**

```{r}
#| label: grafico-geometrica-basico
#| fig-cap: "Distribución Geométrica - Primera cara en lanzamiento de moneda"
ggplot(geometrica_moneda, aes(x = Ensayo, y = Probabilidad)) +
  geom_col(fill = "steelblue", alpha = 0.7, width = 0.8) +
  geom_text(aes(label = round(Probabilidad, 3)), vjust = -0.5, size = 3) +
  geom_vline(xintercept = media_moneda, color = "red", linetype = "dashed", linewidth = 1) +
  annotate("text", x = media_moneda + 1.5, y = max(prob_geometrica) * 0.8, 
           label = paste("E[X] =", media_moneda), color = "red") +
  scale_x_continuous(breaks = k_moneda) +
  labs(title = paste("Distribución Geométrica(", p_cara, ")"),
       subtitle = "Número de lanzamientos antes de obtener la primera cara",
       x = "Número de Ensayos",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

## Comparación: Efecto del parámetro

A continuación exploramos cómo varía la distribución geométrica al cambiar el parámetro $p$.

```{r}
#| label: diferentes-p
# Diferentes probabilidades de éxito
p_values <- c(0.1, 0.3, 0.5, 0.7, 0.9)
k_max <- 15

# Crear data frame para comparación
geometrica_comp <- data.frame()
for(p in p_values) {
  k_vals <- 0:k_max
  probs <- dgeom(k_vals, p)  
  
  temp_data <- data.frame(
    p_label = paste("p =", p),
    k = k_vals,
    probabilidad = probs,
    media = (1-p)/p,
    varianza = (1-p)/(p^2)
  )
  geometrica_comp <- rbind(geometrica_comp, temp_data)
}

# Tabla de parámetros
parametros_comp <- data.frame(
  p = p_values,
  Media = (1-p_values)/p_values,
  Varianza = (1-p_values)/(p_values^2),
  Desv_Std = sqrt((1-p_values)/(p_values^2))
)

kable(parametros_comp, 
      caption = "Parámetros de la distribución geométrica para diferentes valores de p",
      digits = 4,
      col.names = c("p", "Media", "Varianza", "Desv. Std")) |> 
  kable_styling(bootstrap_options = "striped")
```

```{r}
#| label: grafico-diferentes-p
#| fig-cap: "Distribución Geométrica para diferentes valores de p"
# Filtrar para mejor visualización
geometrica_filtered <- geometrica_comp[geometrica_comp$probabilidad > 0.005, ]

ggplot(geometrica_filtered, aes(x = k, y = probabilidad, color = p_label)) +
  geom_line(linewidth = 1, alpha = 0.8) +
  geom_point(size = 2) +
  facet_wrap(~p_label, scales = "free") +
  labs(title = "Distribución Geométrica para diferentes valores de p",
       x = "Número de Ensayos",
       y = "Probabilidad",
       color = "Parámetro") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "none")
```

## Propiedades Importantes

### Propiedad de Pérdida de Memoria

Sea $X\sim geo(p)$ Entonces para cualesquiera enteros $s, t \geq 0$ se cumple la propiedad de pérdida de memoria:

$$P(X \geq s + t | X \geq s) = P(X \geq t)$$

**Verificación Numérica**

Consideremos una variable aleatoria geométrica con $p=0.3$, y verifiquemos la propiedad para $s=5$ y $t=3$.

```{r}
#| label: falta-memoria
# Demostración de la propiedad de falta de memoria
p_mem <- 0.3
s <- 5
t <- 3

# P(X >= s + t)
prob_s_t <- 1 - pgeom(s + t-1, p_mem)  

# P(X >= s) 
prob_s <- 1- pgeom(s-1, p_mem)

# P(X >= t) 
prob_t <- 1- pgeom(t-1, p_mem)

# P(X >= s + t | X >= s) = P(X >= s + t) / P(X >= s)
prob_condicional <- prob_s_t / prob_s

cat("Demostración de la Propiedad de Falta de Memoria:\n")
cat("Parámetros: p =", p_mem, ", s =", s, ", t =", t, "\n\n")
cat("P(X  ≥", s+t, ") =", round(prob_s_t, 6), "\n")
cat("P(X  ≥", s, ") =", round(prob_s, 6), "\n")
cat("P(X  ≥", t, ") =", round(prob_t, 6), "\n\n")
cat("P(X  ≥", s+t, "| X  ≥", s, ") =", round(prob_condicional, 6), "\n")
cat("P(X  ≥", t, ") =", round(prob_t, 6), "\n\n")
cat("¿Son iguales?", abs(prob_condicional - prob_t) < 1e-10, "\n")
```

### Función de Supervivencia

La función de supervivencia $S(k)$ representa la probabilidad de que el número de fracasos antes de obtener el primer éxito sea mayor que $k$:

$$S(k) = P(X > k) = (1-p)^{(k+1)}$$

**Visualización de la Función de Supervivencia**

```{r}
#| label: funcion-supervivencia
#| fig-cap: "Función de Supervivencia de la distribución geométrica"
# Diferentes valores de p
p_surv <- c(0.2, 0.4, 0.6, 0.8)
k_surv <- 0:15

# Crear data frame
supervivencia_data <- data.frame()
for(p in p_surv) {
  surv_vals <- (1 - p)^(k_surv+1)
  temp_data <- data.frame(
    p_label = paste("p =", p),
    k = k_surv,
    supervivencia = surv_vals
  )
  supervivencia_data <- rbind(supervivencia_data, temp_data)
}

ggplot(supervivencia_data, aes(x = k, y = supervivencia, color = p_label)) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 2) +
  labs(title = "Función de Supervivencia: P(X > k)",
       x = "k (número de ensayos antes del primer éxito)",
       y = "Probabilidad de Supervivencia",
       color = "Parámetro") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        legend.position = "bottom")
```

## Ejemplos Aplicados

::: {#exm-geom_calidad}
**Control de Calidad Industrial**

Una máquina produce piezas defectuosas con probabilidad 0.05. ¿Cuántas piezas debemos inspeccionar antes encontrar la primera defectuosa?

```{r}
#| label: control-calidad-geometrica
# Parámetros
p_defecto_geom <- 0.05

# Parámetros estadísticos
media_defecto <- (1-p_defecto_geom) / p_defecto_geom
varianza_defecto <- (1 - p_defecto_geom) / (p_defecto_geom^2)
desv_std_defecto <- sqrt(varianza_defecto)

cat("Control de Calidad - Primera pieza defectuosa:\n")
cat("Probabilidad de defecto por pieza:", p_defecto_geom, "\n")
cat("Número esperado de inspecciones:", media_defecto, "\n")
cat("Desviación estándar:", round(desv_std_defecto, 2), "\n\n")

# Probabilidades específicas
k_calidad <- 0:50
prob_calidad <- dgeom(k_calidad, p_defecto_geom)

# Preguntas de interés
prob_primera_10 <- sum(prob_calidad[1:10])
prob_mas_20 <- 1 - sum(prob_calidad[1:20])
prob_entre_10_30 <- sum(prob_calidad[10:30])

cat("Probabilidades de interés:\n")
cat("P(primera defectuosa en ≤ 10 inspecciones):", round(prob_primera_10, 4), "\n")
cat("P(primera defectuosa en > 20 inspecciones):", round(prob_mas_20, 4), "\n")
cat("P(primera defectuosa entre 10 y 30 inspecciones):", round(prob_entre_10_30, 4), "\n")



# Visualización
calidad_data <- data.frame(
  k = k_calidad[1:40],
  probabilidad = prob_calidad[1:40]
)

ggplot(calidad_data, aes(x = k, y = probabilidad)) +
  geom_col(fill = "darkgreen", alpha = 0.7, width = 0.8) +
  geom_vline(xintercept = media_defecto, color = "red", linetype = "dashed", size = 1) +
  annotate("text", x = media_defecto + 5, y = max(prob_calidad) * 0.8, 
           label = paste("E(X) =", media_defecto), color = "red") +
  labs(title = "Control de Calidad: Primera Pieza Defectuosa",
       subtitle = paste("Geométrica(", p_defecto_geom, ")"),
       x = "Número de Inspecciones",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```
:::

## Simulación: Validación de propiedades teóricas

```{r}
#| label: simulacion-geometrica
set.seed(123)
p_sim <- 0.25
n_sim <- 10000

# Generar datos geométricos 
datos_geom <- rgeom(n_sim, p_sim) 

# Estadísticas observadas
media_obs <- mean(datos_geom)
var_obs <- var(datos_geom)
desv_obs <- sd(datos_geom)

# Valores teóricos
media_teo <- (1-p_sim) / p_sim
var_teo <- (1 - p_sim) / (p_sim^2)
desv_teo <- sqrt(var_teo)

cat("Simulación Geométrica (p =", p_sim, "):\n")
cat("Simulaciones:", n_sim, "\n\n")
cat("Media teórica:", media_teo, "| Media observada:", round(media_obs, 4), "\n")
cat("Varianza teórica:", var_teo, "| Varianza observada:", round(var_obs, 4), "\n")
cat("Desv. Std teórica:", round(desv_teo, 4), "| Desv. Std observada:", round(desv_obs, 4), "\n")

# Comparar distribuciones
freq_obs <- table(datos_geom[datos_geom <= 20]) / n_sim
k_comp <- as.numeric(names(freq_obs))
prob_teo <- dgeom(k_comp, p_sim)

comparacion_sim <- data.frame(
  k = k_comp,
  Freq_Observada = as.numeric(freq_obs),
  Prob_Teorica = prob_teo,
  Diferencia = abs(as.numeric(freq_obs) - prob_teo)
)

kable(head(comparacion_sim, 12), 
      caption = "Comparación frecuencias observadas vs probabilidades teóricas",
      digits = 4,
      col.names = c("k", "Freq. Observada", "Prob. Teórica", "Diferencia")) %>%
  kable_styling(bootstrap_options = "striped")
```

## Ejercicios Propuestos

::: {#exr-geom_1}
Se lanza una moneda hasta obtener la primera cara.

-   

    a)  ¿Cuál es la probabilidad de necesitar exactamente 5 lanzamientos?

-   

    b)  ¿Cuál es la probabilidad de necesitar más de 3 lanzamientos?

-   

    c)  Calcule la media y varianza del número de lanzamientos.
```{r}
#| label: parametros-moneda
#| echo: true

# Parámetros
p_cara <- 0.5

# Parámetros estadísticos
media_lanzamientos <- 1 / p_cara
varianza_lanzamientos <- (1 - p_cara) / (p_cara^2)
desv_std_lanzamientos <- sqrt(varianza_lanzamientos)

cat("Lanzamientos hasta la primera cara:\n")
cat("Probabilidad de cara por lanzamiento:", p_cara, "\n")
cat("Número esperado de lanzamientos:", media_lanzamientos, "\n")
cat("Desviación estándar:", round(desv_std_lanzamientos, 2), "\n")
```

```{r}
#| label: probabilidades-especificas
#| echo: true

# Probabilidades específicas
k_lanzamientos <- 0:20
prob_lanzamientos <- dgeom(k_lanzamientos, p_cara)

# Preguntas de interés
prob_exactamente_5 <- dgeom(4, p_cara)  # k=4 porque dgeom cuenta fracasos antes del éxito
prob_mas_de_3 <- 1 - pgeom(2, p_cara)   # P(X > 3) = 1 - P(X ≤ 3)
prob_entre_5_10 <- pgeom(9, p_cara) - pgeom(3, p_cara)

cat("Probabilidades de interés:\n")
cat("P(necesitar exactamente 5 lanzamientos):", round(prob_exactamente_5, 4), "\n")
cat("P(necesitar más de 3 lanzamientos):", round(prob_mas_de_3, 4), "\n")
cat("P(necesitar entre 5 y 10 lanzamientos):", round(prob_entre_5_10, 4), "\n")
```

```{r}
#| label: visualizacion-moneda
#| echo: true
#| fig.height: 6
#| fig.width: 8

# Visualización
lanzamientos_data <- data.frame(
  k = k_lanzamientos[1:15],
  probabilidad = prob_lanzamientos[1:15]
)

library(ggplot2)

ggplot(lanzamientos_data, aes(x = k + 1, y = probabilidad)) +
  geom_col(fill = "steelblue", alpha = 0.7, width = 0.8) +
  geom_vline(xintercept = media_lanzamientos, color = "red", linetype = "dashed", size = 1) +
  annotate("text", x = media_lanzamientos + 1.5, y = max(prob_lanzamientos) * 0.8, 
           label = paste("E(X) =", media_lanzamientos), color = "red") +
  labs(title = "Lanzamientos hasta la primera cara",
       subtitle = paste("Distribución Geométrica(p =", p_cara, ")"),
       x = "Número de Lanzamientos",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```

```{r}
#| label: simulacion-moneda
#| echo: true

set.seed(123)
p_sim <- 0.5
n_sim <- 10000

# Generar datos geométricos (número de fracasos antes del primer éxito)
datos_geom <- rgeom(n_sim, p_sim) 

# Convertir a número total de lanzamientos (éxito incluido)
lanzamientos_totales <- datos_geom + 1

# Estadísticas observadas
media_obs <- mean(lanzamientos_totales)
var_obs <- var(lanzamientos_totales)
desv_obs <- sd(lanzamientos_totales)

# Valores teóricos
media_teo <- 1 / p_sim
var_teo <- (1 - p_sim) / (p_sim^2)
desv_teo <- sqrt(var_teo)

cat("Simulación Geométrica - Moneda (p =", p_sim, "):\n")
cat("Simulaciones:", n_sim, "\n\n")
cat("Media teórica:", media_teo, "| Media observada:", round(media_obs, 4), "\n")
cat("Varianza teórica:", var_teo, "| Varianza observada:", round(var_obs, 4), "\n")
cat("Desv. Std teórica:", round(desv_teo, 4), "| Desv. Std observada:", round(desv_obs, 4), "\n\n")
```

```{r}
#| label: probabilidades-simuladas
#| echo: true

# Probabilidades específicas de la simulación
prob_sim_5 <- mean(lanzamientos_totales == 5)
prob_sim_mas_3 <- mean(lanzamientos_totales > 3)

cat("Probabilidades simuladas:\n")
cat("P(X = 5) simulado:", round(prob_sim_5, 4), "| Teórico:", round(dgeom(4, p_sim), 4), "\n")
cat("P(X > 3) simulado:", round(prob_sim_mas_3, 4), "| Teórico:", round(1 - pgeom(2, p_sim), 4), "\n")
```

```{r}
#| label: comparacion-distribuciones
#| echo: true

# Comparar distribuciones
freq_obs <- table(lanzamientos_totales[lanzamientos_totales <= 15]) / n_sim
k_comp <- as.numeric(names(freq_obs))
prob_teo <- dgeom(k_comp - 1, p_sim)  # Ajustar porque dgeom cuenta fracasos

comparacion_sim <- data.frame(
  Lanzamientos = k_comp,
  Freq_Observada = as.numeric(freq_obs),
  Prob_Teorica = prob_teo,
  Diferencia = abs(as.numeric(freq_obs) - prob_teo)
)

library(knitr)
library(kableExtra)

kable(comparacion_sim, 
      caption = "Comparación frecuencias observadas vs probabilidades teóricas",
      digits = 4,
      col.names = c("Lanzamientos", "Freq. Observada", "Prob. Teórica", "Diferencia")) %>%
  kable_styling(bootstrap_options = "striped")
```
:::


::: {#exr-geom_2}
Un jugador de básquetbol tiene 70% de probabilidad de anotar un tiro libre.

-   

    a)  ¿Cuál es la probabilidad de que anote en el tercer intento por primera vez?

-   

    b)  ¿Cuántos intentos se espera que necesite para anotar?

-   

    c)  ¿Cuál es la probabilidad de necesitar entre 2 y 5 intentos?

```{r}
#| label: parametros-basquet
#| echo: true

# Parámetros
p_anotar <- 0.70

# Parámetros estadísticos
media_intentos <- 1 / p_anotar
varianza_intentos <- (1 - p_anotar) / (p_anotar^2)
desv_std_intentos <- sqrt(varianza_intentos)

cat("Tiros libres hasta la primera anotación:\n")
cat("Probabilidad de anotar por tiro:", p_anotar, "\n")
cat("Número esperado de intentos:", round(media_intentos, 4), "\n")
cat("Desviación estándar:", round(desv_std_intentos, 4), "\n")
```

```{r}
#| label: probabilidades-basquet
#| echo: true

# Probabilidades específicas
k_intentos <- 0:15
prob_intentos <- dgeom(k_intentos, p_anotar)

# Preguntas de interés
prob_tercer_intento <- dgeom(2, p_anotar)  # k=2 porque dgeom cuenta fracasos antes del éxito
prob_entre_2_5 <- pgeom(4, p_anotar) - pgeom(0, p_anotar)  # P(2 ≤ X ≤ 5)

cat("Probabilidades de interés:\n")
cat("P(anotar en el tercer intento por primera vez):", round(prob_tercer_intento, 4), "\n")
cat("P(necesitar entre 2 y 5 intentos):", round(prob_entre_2_5, 4), "\n")
cat("Número esperado de intentos:", round(media_intentos, 4), "\n")
```

```{r}
#| label: visualizacion-basquet
#| echo: true
#| fig.height: 6
#| fig.width: 8

# Visualización
intentos_data <- data.frame(
  k = k_intentos[1:10],
  probabilidad = prob_intentos[1:10]
)

library(ggplot2)

ggplot(intentos_data, aes(x = k + 1, y = probabilidad)) +
  geom_col(fill = "darkorange", alpha = 0.7, width = 0.8) +
  geom_vline(xintercept = media_intentos, color = "red", linetype = "dashed", size = 1) +
  annotate("text", x = media_intentos + 0.8, y = max(prob_intentos) * 0.8, 
           label = paste("E(X) =", round(media_intentos, 2)), color = "red") +
  labs(title = "Tiros libres hasta la primera anotación",
       subtitle = paste("Distribución Geométrica(p =", p_anotar, ")"),
       x = "Número de Intentos",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```

```{r}
#| label: simulacion-basquet
#| echo: true

set.seed(123)
p_sim <- 0.70
n_sim <- 10000

# Generar datos geométricos (número de fracasos antes del primer éxito)
datos_geom <- rgeom(n_sim, p_sim) 

# Convertir a número total de intentos (éxito incluido)
intentos_totales <- datos_geom + 1

# Estadísticas observadas
media_obs <- mean(intentos_totales)
var_obs <- var(intentos_totales)
desv_obs <- sd(intentos_totales)

# Valores teóricos
media_teo <- 1 / p_sim
var_teo <- (1 - p_sim) / (p_sim^2)
desv_teo <- sqrt(var_teo)

cat("Simulación Geométrica - Tiros Libres (p =", p_sim, "):\n")
cat("Simulaciones:", n_sim, "\n\n")
cat("Media teórica:", round(media_teo, 4), "| Media observada:", round(media_obs, 4), "\n")
cat("Varianza teórica:", round(var_teo, 4), "| Varianza observada:", round(var_obs, 4), "\n")
cat("Desv. Std teórica:", round(desv_teo, 4), "| Desv. Std observada:", round(desv_obs, 4), "\n\n")
```

```{r}
#| label: probabilidades-simuladas-basquet
#| echo: true

# Probabilidades específicas de la simulación
prob_sim_tercero <- mean(intentos_totales == 3)
prob_sim_entre_2_5 <- mean(intentos_totales >= 2 & intentos_totales <= 5)

cat("Probabilidades simuladas:\n")
cat("P(anotar en 3er intento) simulado:", round(prob_sim_tercero, 4), 
    "| Teórico:", round(dgeom(2, p_sim), 4), "\n")
cat("P(entre 2 y 5 intentos) simulado:", round(prob_sim_entre_2_5, 4), 
    "| Teórico:", round(pgeom(4, p_sim) - pgeom(0, p_sim), 4), "\n")
```

```{r}
#| label: comparacion-distribuciones-basquet
#| echo: true

# Comparar distribuciones
freq_obs <- table(intentos_totales[intentos_totales <= 10]) / n_sim
k_comp <- as.numeric(names(freq_obs))
prob_teo <- dgeom(k_comp - 1, p_sim)  # Ajustar porque dgeom cuenta fracasos

comparacion_sim <- data.frame(
  Intentos = k_comp,
  Freq_Observada = as.numeric(freq_obs),
  Prob_Teorica = prob_teo,
  Diferencia = abs(as.numeric(freq_obs) - prob_teo)
)

library(knitr)
library(kableExtra)

kable(comparacion_sim, 
      caption = "Comparación frecuencias observadas vs probabilidades teóricas",
      digits = 4,
      col.names = c("Intentos", "Freq. Observada", "Prob. Teórica", "Diferencia")) %>%
  kable_styling(bootstrap_options = "striped")
```

:::

::: {#exr-geom_3}
Una máquina tiene probabilidad 0.02 de producir una pieza defectuosa.

-   

    a)  Si se inspeccionan las piezas hasta encontrar la primera defectuosa, ¿cuál es el número esperado de inspecciones?

-   

    b)  ¿Cuál es la probabilidad de que la primera pieza defectuosa aparezca después de la pieza número 100?

-   

    c)  Demuestre la propiedad de falta de memoria para este problema.

```{r}
#| label: parametros-defectuosas
#| echo: true

# Parámetros
p_defecto <- 0.02

# Parámetros estadísticos
media_inspecciones <- 1 / p_defecto
varianza_inspecciones <- (1 - p_defecto) / (p_defecto^2)
desv_std_inspecciones <- sqrt(varianza_inspecciones)

cat("Inspecciones hasta la primera pieza defectuosa:\n")
cat("Probabilidad de defecto por pieza:", p_defecto, "\n")
cat("Número esperado de inspecciones:", media_inspecciones, "\n")
cat("Desviación estándar:", round(desv_std_inspecciones, 2), "\n")
```

```{r}
#| label: probabilidades-defectuosas
#| echo: true

# Probabilidades específicas
k_inspecciones <- 0:200
prob_inspecciones <- dgeom(k_inspecciones, p_defecto)

# Preguntas de interés
prob_despues_100 <- 1 - pgeom(99, p_defecto)  # P(X > 100)
prob_entre_50_150 <- pgeom(149, p_defecto) - pgeom(49, p_defecto)

cat("Probabilidades de interés:\n")
cat("P(primera defectuosa después de la pieza 100):", round(prob_despues_100, 6), "\n")
cat("P(primera defectuosa entre piezas 50-150):", round(prob_entre_50_150, 4), "\n")
cat("Número esperado de inspecciones:", media_inspecciones, "\n")
```

```{r}
#| label: visualizacion-defectuosas
#| echo: true
#| fig.height: 6
#| fig.width: 8

# Visualización (primeras 100 inspecciones)
inspecciones_data <- data.frame(
  k = k_inspecciones[1:100],
  probabilidad = prob_inspecciones[1:100]
)

library(ggplot2)

ggplot(inspecciones_data, aes(x = k + 1, y = probabilidad)) +
  geom_col(fill = "firebrick", alpha = 0.7, width = 0.8) +
  geom_vline(xintercept = media_inspecciones, color = "red", linetype = "dashed", size = 1) +
  annotate("text", x = media_inspecciones + 15, y = max(prob_inspecciones) * 0.8, 
           label = paste("E(X) =", media_inspecciones), color = "red") +
  labs(title = "Inspecciones hasta la primera pieza defectuosa",
       subtitle = paste("Distribución Geométrica(p =", p_defecto, ")"),
       x = "Número de Inspecciones",
       y = "Probabilidad") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.subtitle = element_text(hjust = 0.5))
```

```{r}
#| label: falta-memoria-teorica
#| echo: true

# Demostración de la propiedad de falta de memoria
# P(X > s + t | X > s) = P(X > t)

s <- 50  # Ya hemos inspeccionado 50 piezas sin defectos
t <- 30  # Queremos probabilidad de necesitar 30 más

# Probabilidad condicional teórica
prob_cond_teorica <- (1 - p_defecto)^t

# Cálculo directo usando la definición
prob_s <- (1 - p_defecto)^s
prob_s_t <- (1 - p_defecto)^(s + t)
prob_cond_directa <- prob_s_t / prob_s

cat("PROPIEDAD DE FALTA DE MEMORIA - Demostración Teórica:\n")
cat("====================================================\n")
cat("Parámetros:\n")
cat("s =", s, "(ya inspeccionadas sin defectos)\n")
cat("t =", t, "(inspecciones adicionales)\n")
cat("p =", p_defecto, "\n\n")
cat("P(X >", s + t, "| X >", s, ") = P(X >", t, ")\n")
cat("Probabilidad teórica P(X >", t, "):", round(prob_cond_teorica, 6), "\n")
cat("Cálculo directo P(X >", s + t, ") / P(X >", s, "):", round(prob_cond_directa, 6), "\n")
cat("¿Son iguales?", abs(prob_cond_teorica - prob_cond_directa) < 1e-10, "\n\n")
```

```{r}
#| label: simulacion-defectuosas
#| echo: true

set.seed(123)
p_sim <- 0.02
n_sim <- 50000  # Más simulaciones por la baja probabilidad

# Generar datos geométricos (número de no defectuosas antes de la primera defectuosa)
datos_geom <- rgeom(n_sim, p_sim) 

# Convertir a número total de inspecciones (defectuosa incluida)
inspecciones_totales <- datos_geom + 1

# Estadísticas observadas
media_obs <- mean(inspecciones_totales)
var_obs <- var(inspecciones_totales)
desv_obs <- sd(inspecciones_totales)

# Valores teóricos
media_teo <- 1 / p_sim
var_teo <- (1 - p_sim) / (p_sim^2)
desv_teo <- sqrt(var_teo)

cat("Simulación Geométrica - Piezas Defectuosas (p =", p_sim, "):\n")
cat("Simulaciones:", n_sim, "\n\n")
cat("Media teórica:", media_teo, "| Media observada:", round(media_obs, 4), "\n")
cat("Varianza teórica:", round(var_teo, 2), "| Varianza observada:", round(var_obs, 2), "\n")
cat("Desv. Std teórica:", round(desv_teo, 2), "| Desv. Std observada:", round(desv_obs, 2), "\n\n")
```

```{r}
#| label: probabilidades-simuladas-defectuosas
#| echo: true

# Probabilidades específicas de la simulación
prob_sim_despues_100 <- mean(inspecciones_totales > 100)
prob_sim_entre_50_150 <- mean(inspecciones_totales >= 50 & inspecciones_totales <= 150)

cat("Probabilidades simuladas:\n")
cat("P(después de 100) simulado:", round(prob_sim_despues_100, 6), 
    "| Teórico:", round(1 - pgeom(99, p_sim), 6), "\n")
cat("P(entre 50-150) simulado:", round(prob_sim_entre_50_150, 4), 
    "| Teórico:", round(pgeom(149, p_sim) - pgeom(49, p_sim), 4), "\n")
```

```{r}
#| label: falta-memoria-simulacion
#| echo: true

# Demostración de falta de memoria mediante simulación
set.seed(456)
n_sim_memoria <- 100000

# Simulamos inspecciones hasta encontrar defectuosa
inspecciones <- rgeom(n_sim_memoria, p_defecto) + 1

# Filtramos casos donde X > s (más de 50 inspecciones sin defecto)
casos_condicionales <- inspecciones[inspecciones > s]

# Calculamos P(X > s + t | X > s) de forma empírica
prob_cond_simulada <- mean(casos_condicionales > s + t)

cat("FALTA DE MEMORIA - Verificación por Simulación:\n")
cat("==============================================\n")
cat("Total de simulaciones:", n_sim_memoria, "\n")
cat("Casos donde X >", s, ":", length(casos_condicionales), "\n")
cat("P(X >", s + t, "| X >", s, ") simulada:", round(prob_cond_simulada, 6), "\n")
cat("P(X >", t, ") teórica:", round((1 - p_defecto)^t, 6), "\n")
cat("Diferencia:", round(abs(prob_cond_simulada - (1 - p_defecto)^t), 6), "\n")
```

```{r}
#| label: comparacion-distribuciones-defectuosas
#| echo: true

# Comparar distribuciones (primeras 50 inspecciones)
freq_obs <- table(inspecciones_totales[inspecciones_totales <= 100]) / n_sim
k_comp <- as.numeric(names(freq_obs))
prob_teo <- dgeom(k_comp - 1, p_sim)  # Ajustar porque dgeom cuenta no defectuosas

comparacion_sim <- data.frame(
  Inspecciones = k_comp,
  Freq_Observada = as.numeric(freq_obs),
  Prob_Teorica = prob_teo,
  Diferencia = abs(as.numeric(freq_obs) - prob_teo)
)

library(knitr)
library(kableExtra)

kable(head(comparacion_sim, 15), 
      caption = "Comparación frecuencias observadas vs probabilidades teóricas (primeras 15)",
      digits = 6,
      col.names = c("Inspecciones", "Freq. Observada", "Prob. Teórica", "Diferencia")) %>%
  kable_styling(bootstrap_options = "striped")
```
:::


